{"name":"Tyche","tagline":"a multiscale stochastic reaction-diffusion modelling software library in C++ and Python","body":"Tyche (http://tychessa.github.io)\r\n=================================\r\nCopyright (C) 2013 Martin Robinson (martin.robinson@maths.ox.ac.uk)\r\nPoint your browser to http://people.maths.ox.ac.uk/robinsonm/index.html for more information about the author and other work.\r\n\r\nTyche is a multiscale stochastic reaction-diffusion modelling software library. It consists of:\r\n\r\n(a) an off-lattice (particle-based) model based on the Smoluchowski model, including diffusion, zeroth-order, unimolecular and bimolecular reactions. \r\n\r\n(b) an on-lattice model based on the Next Subvolume Method (based in turn on the Gillespie algorithm). This models stochastic diffusion, and reactions of arbitrary order\r\n\r\n(c) a coupling between the off-lattice and on-lattice models, suitable for domain decomposition problems. This implements the Adaptive Two-Regime method, detailed in the following paper:\r\n\r\nMartin Robinson, Mark Flegg, Radek Erban, \"Adaptive two-regime method: application to front propagation\", submitted to Journal of Chemical Physics (http://arxiv.org/abs/1312.6338)\r\n\r\nInterfaces\r\n==========\r\n\r\nTyche has both C++ and Python interfaces. \r\n\r\n\r\nExample of Python interface\r\n===========================\r\n```python\r\nL = 0.5\r\nD = 1\r\ntimesteps = 100000\r\n\r\nmax_t = 4.0/(2.0*num_particles**0.5);\r\nmol_dt = max_t/timesteps\r\n    \r\nk2 = 1.0\r\nk1 = 1.0\r\n\r\nbinding =  0.00303416\r\nunbinding = 0.15*0.00303416\r\n\r\nA = tyche.new_species(D)\r\nB = tyche.new_species(D)\r\nC = tyche.new_species(D)\r\n    \r\nbd = tyche.new_diffusion()\r\nbd.add_species(A)\r\nbd.add_species(B)\r\nbd.add_species(C)\r\n    \r\nxlow = tyche.new_xplane(0,1)\r\nxhigh = tyche.new_xplane(L,-1)\r\nylow = tyche.new_yplane(0,1)\r\nyhigh = tyche.new_yplane(L,-1)\r\nzlow = tyche.new_zplane(0,1)\r\nzhigh = tyche.new_zplane(L,-1)\r\n\r\nxminboundary = tyche.new_jump_boundary(xlow,[L,0,0])\r\nxmaxboundary = tyche.new_jump_boundary(xhigh,[-L,0,0])\r\nyminboundary = tyche.new_jump_boundary(ylow,[0,L,0])\r\nymaxboundary = tyche.new_jump_boundary(yhigh,[0,-L,0])\r\nzminboundary = tyche.new_jump_boundary(zlow,[0,0,L])\r\nzmaxboundary = tyche.new_jump_boundary(zhigh,[0,0,-L])\r\n\r\nboundaries = tyche.group([xminboundary, xmaxboundary, yminboundary, ymaxboundary, zminboundary, zmaxboundary])\r\n    boundaries.add_species(A)\r\n    boundaries.add_species(B)\r\n    boundaries.add_species(C)\r\n\r\ndr2 = tyche.new_bi_reaction(k1, A, B, [C], binding,unbinding, mol_dt, \r\n                          [0,0,0], [L,L,L], [True, True, True],True)\r\ndr3 = tyche.new_bi_reaction(k1, A, B, [C], mol_dt, \r\n                          [0,0,0], [L,L,L], [True, True, True],True)   \r\n     \r\ndr = tyche.new_uni_reaction(k2,C,[A,B],unbinding)\r\n\r\nalgorithm = tyche.group([bd,boundaries,dr2,dr,boundaries])\r\n    \r\nA.fill_uniform([0,0,0],[L,L,L],int(num_particles*L**3))\r\nB.fill_uniform([0,0,0],[L,L,L],int(num_particles*L**3))\r\nC.fill_uniform([0,0,0],[L,L,L],int(num_particles*L**3))\r\n\r\noutput_dt = max_t/100.0\r\ntime = 0;\r\nprint algorithm\r\n    \r\nfor i in range(100):\r\n   print A,B,C\r\n   print 'time = ',time,' ',i,' percent done'\r\n   time = algorithm.integrate_for_time(output_dt,mol_dt)\r\n```\r\n\r\n\r\n","google":"UA-48149829-3","note":"Don't delete this file! It's used internally to help with page regeneration."}